{"version":3,"file":"RxjsDynamoDB.js","sourceRoot":"","sources":["../src/RxjsDynamoDB.ts"],"names":[],"mappings":";AAAA;;;;;;;;;;;;;;;;;;;EAmBE;;;AAEF,+EAA+I;AAG/I,8CAAqF;AACrF,mCAAgC;AAahC,MAAa,YAAY;IAIvB,YAAY,MAAc;QACxB,IAAI,CAAC,OAAO,GAAG,IAAI,sCAAkB,CAAC,MAAM,CAAC,CAAC;QAC9C,MAAM,KAAK,GAAG,CAAC,IAAe,EAAE,EAAE,CAAC,IAAI;YACrC,CAAC,CAAC,GAAG,MAAM,CAAC,SAAS,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,EAAE,EAAE;YAC/F,CAAC,CAAC,EAAE,CAAC;QACP,IAAI,CAAC,MAAM,GAAG,IAAI,aAAK,CAAY,KAAK,CAAC,CAAC;IAC5C,CAAC;IAEM,OAAO,CACZ,IAAyB,EACzB,OAA+B;QAE/B,IAAI,CAAC,IAAI,CAAC,GAAG;YAAE,MAAM,wBAAwB,CAAC;QAC9C,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC;YACrC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,IAAI,CACtC,kBAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,EAC/B,oBAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,IAAK,CAAC,CAAC,CACzD,CAAC;IACN,CAAC;IAEM,OAAO,CACZ,IAAyB,EACzB,OAA+B;QAE/B,IAAI,CAAC,IAAI,CAAC,IAAI;YAAE,MAAM,0BAA0B,CAAC;QACjD,OAAO,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,IAAI,CAC7C,oBAAQ,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAK,CAAC,CAAC,CACnD,CAAC;IACJ,CAAC;IAAA,CAAC;IAEK,IAAI,CACT,IAAsB,EACtB,OAA4B;QAE5B,OAAO,IAAI,CAAC,OAAO;aAChB,IAAI,CAAC,IAAI,EAAE,OAAO,CAAC;aACnB,IAAI,CACH,oBAAQ,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC,GAAG,CACzC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CACrE,CAAC,EACF,kBAAM,EAAE,CACT,CAAC;IACN,CAAC;CACF;AA/CD,oCA+CC","sourcesContent":["/*\n  GPL 3.0 License\n\n  RxjsDynamoDB - An Observable DynamoDB Client\n\n  Copyright (C) 2020 Joshua Hull\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { GetItemCommandOptions, ObservableDynamoDB, PutItemCommandOptions, ScanCommandOptions } from '@dynamo-dot-subscribe/observable-dynamo';\nimport { AttributeValue, DynamoDBClientConfig, GetItemCommandInput, PutItemCommand, PutItemCommandInput, ScanCommand, ScanCommandInput } from '@aws-sdk/client-dynamodb';\nimport { BehaviorSubject, Observable } from \"rxjs\";\nimport { combineAll, filter, map, mergeAll, mergeMap, zipAll } from 'rxjs/operators';\nimport { State } from './State';\n\ntype DynamoItem = { [key: string]: AttributeValue } | undefined;\ntype StateItem = NonNullable<DynamoItem>;\n\ninterface MoreConfig {\n  tableName: string;\n  hashKey: string;\n  rangeKey?: string;\n}\n\nexport type Config = DynamoDBClientConfig & MoreConfig;\n\nexport class RxjsDynamoDB {\n  private _client: ObservableDynamoDB;\n  private _state: State<StateItem>;\n\n  constructor(config: Config) {\n    this._client = new ObservableDynamoDB(config);\n    const toKey = (item: StateItem) => item\n      ? `${config.tableName}:${item[config.hashKey]}:${config.rangeKey ? item[config.rangeKey] : ''}`\n      : '';\n    this._state = new State<StateItem>(toKey);\n  }\n\n  public getItem(\n    args: GetItemCommandInput,\n    options?: GetItemCommandOptions\n  ): Observable<StateItem> {\n    if (!args.Key) throw 'GetItem requires a key';\n    return this._state.getSubject(args.Key) ||\n      this._client.getItem(args, options).pipe(\n        filter(output => !!output.Item),\n        mergeMap(output => this._state.setSubject(output.Item!)),\n      );\n  }\n\n  public putItem(\n    args: PutItemCommandInput,\n    options?: PutItemCommandOptions\n  ): Observable<StateItem> {\n    if (!args.Item) throw 'PutItem requires an item';\n    return this._client.putItem(args, options).pipe(\n      mergeMap(() => this._state.setSubject(args.Item!))\n    );\n  };\n\n  public scan(\n    args: ScanCommandInput,\n    options?: ScanCommandOptions\n  ): Observable<StateItem[]> {\n    return this._client\n      .scan(args, options)\n      .pipe(\n        mergeMap(output => (output.Items || []).map(\n          item => this._state.getSubject(item) || this._state.setSubject(item)\n        )),\n        zipAll()\n      );\n  }\n}\n"]}